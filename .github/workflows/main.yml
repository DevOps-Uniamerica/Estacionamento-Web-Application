name: CI Pipeline
 
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend:
    name: Build e Teste do Backend
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
      SPRING_DATASOURCE_USERNAME: testuser
      SPRING_DATASOURCE_PASSWORD: testpass
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar JDK 20
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '20'

      - name: Cache do Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build e Test backend
        working-directory: API   # Ajuste para o diretório onde seu pom.xml está localizado (ex.: 'API' ou 'estacionamento')
        run: mvn clean verify

  deploy-backend:
    name: Deploy Backend na EC2
    needs: [backend]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar chave SSH
        run: |
          echo "${{ secrets.BACKEND_KEY }}" > backend_key.pem
          chmod 600 backend_key.pem

      - name: Copiar build para EC2 do frontend
        run: |
           scp -i backend_key.pem -o StrictHostKeyChecking=no -r API ${{ secrets.AWS_USER }}@${{ secrets.BACKEND_HOST }}:/home/${{ secrets.AWS_USER }}/
      
      - name: Build e rodar container via SSH
        run: |
           ssh -i backend_key.pem -o StrictHostKeyChecking=no ${{ secrets.AWS_USER }}@${{ secrets.BACKEND_HOST }} <<EOF
             cd /home/${{ secrets.AWS_USER }}/API
             docker build -t estacionamento-app .
             docker stop estacionamento-app || true
             docker rm estacionamento-app || true
             docker run -d --name estacionamento-app --restart=always -p 8080:8080 estacionamento-app
           EOF

           
  frontend:
    name: Build e Teste do Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # ou '18', conforme a necessidade do seu projeto

      - name: Cache de dependências Node
        uses: actions/cache@v3
        with:
          path: interface/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('interface/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Instalar dependências do frontend
        working-directory: interface
        run: npm i --force

      - name: Executar testes do frontend
        working-directory: interface
        run: npm run test:unit


  deploy-frontend:
    name: Deploy Frontend na EC2
    needs: [frontend]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar chave SSH
        run: |
          echo "${{ secrets.FRONTEND_KEY }}" > frontend_key.pem
          chmod 600 frontend_key.pem
          
      - name: Instala Dependecias
        working-directory: interface
        run: npm i --force

      - name: Build do Frontend
        working-directory: interface
        run: npm run build

      - name: Copiar build para EC2 do frontend
        run: |
          scp -i frontend_key.pem -o StrictHostKeyChecking=no -r interface/dist/* ${{ secrets.AWS_USER }}@${{ secrets.FRONTEND_HOST }}:/home/${{ secrets.AWS_USER }}/temp-deploy/
      
      - name: Mover build para o NGINX com sudo
        run: |
            ssh -i frontend_key.pem -o StrictHostKeyChecking=no ${{ secrets.AWS_USER }}@${{ secrets.FRONTEND_HOST }} << 'EOF'
              sudo rm -rf /usr/share/nginx/html/*
              sudo cp -r /home/${{ secrets.AWS_USER }}/temp-deploy/* /usr/share/nginx/html/
              sudo rm -rf /home/${{ secrets.AWS_USER }}/temp-deploy/*
            EOF
